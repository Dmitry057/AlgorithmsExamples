"""
    id посылки - 69765547

        -- ПРИНЦИП РАБОТЫ –-

    Составляется остов на основе алгоритма Прима https://ru.wikipedia.org/wiki/Алгоритм_Прима,
    но поиск максимального веса делается с помощью приоритетной очереди(кучи).

    Изначально наш подграф состоит из одной любой вершины исходного графа.

    Затем из рёбер инцидентных этой вершине, выбирается такое максимальное ребро,
    которое связала бы две абсолютно разные компоненты связности, одной из которых и является наш подграф.
    То есть, как только у нас появляется возможность добавить новую вершину в наш подграф,
    мы тут же включаем ее по минимальмально возможному весу.

    Продолжаем выполнять предыдущий шаг до тех пор, пока не найдем искомое MST.
    
        -- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ –-

    https://habr.com/ru/post/569444/

        -- ВРЕМЕННАЯ СЛОЖНОСТЬ –-

    Алгоритму требуется число шагов, пропорциональное количеству вершин. На каждом шаге мы находим
     максимальное по весу ребро. На поиск максимальнго ребра нам требуется в худшем случае перебрать
    все рёбра. В итоге сложность алгоритма будет O(|V|*|E|), однако
    благодаря приоритетной очереди сложность алгоритма Прима стала
    O(|E| * log{|E|), так как найденные ребра уже не требуется сортировать, они добавляются в очередь только
    при инициализации.

        -- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ --
    Хранение кучи - О(n)
    Граф - O(E*V) 
"""
import heapq

MST = []
n,m = map(int, input().split())
graph = [[] for _ in range(n)]
added = [False]*n
added[0] = True
edges = []

for i in range(m):
    u,v,w = map(int, input().split())
    graph[u-1].append((v-1,w))
    graph[v-1].append((u-1,w))


def add_vertex(v):
    added[v] = True
    for edge, weight in graph[v]:
        if not added[edge]:
            heapq.heappush(edges, (-weight, edge))
    
def find_mst():
    add_vertex(0)
    res = 0
    while not all(added) and edges:
        weight, vertex = heapq.heappop(edges)
        if(not added[vertex]):
            res += abs(weight)
            add_vertex(vertex)
    if not all(added):
        return 'Oops! I did it again'
    else:
        return res

print(find_mst())