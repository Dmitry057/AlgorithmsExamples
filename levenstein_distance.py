"""
    id посылки - 70256776

        -- ПРИНЦИП РАБОТЫ –-
    Я взял за основу алгоритм Вагнера-Фишера
    
    Создадим матрицу, в которую будем вносить изменения после проверки каждой буквы.
    Для примера - 2 слова: Биба и Боба

         Б И Б А
       0 1 2 3 4
     Б 1 - - - - 
     О 2 - - - - 
     Б 3 - - - -
     А 4 - - - -

    Стартовое положение матрицы. Индекс букв в словах начинается с 1
   
    будем искать минимальный рекуррентный путь: min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) 

    Тут идет расчет на все возможные рекуррентные пути.

         Б И Б А
       0 1 2 3 4
     Б 1 0 - - - 
     О 2 - - - - 
     Б 3 - - - -
     А 4 - - - -

     При этом если элементы a[i] = b[j], берем минимальный путь, однако прибавляем единицу к dp[i-1][j] и dp[i][j-1], т.к. в данных случаях
    не берется итоговый вариант из совпадающих букв a[i] и b[j] (идет замена/удаление/вставка). 

         Б И Б А
       0 1 2 3 4
     Б 1 0 1 - -
     О 2 - - - -
     Б 3 - - - -
     А 4 - - - -

    Если элементы a[i] != b[j], то берем минимальный путь, однако прибавляем единицу к dp[i-1][j], dp[i][j-1] dp[i-1][j-1], т.к. в любом из
    случаев будет замена/удаление/вставка элемента.

   
         Б И Б А
       0 1 2 3 4
     Б 1 0 1 2 3
     О 2 1 1 2 3
     Б 3 2 2 1 2
     А 4 3 3 2 1

    В столбце dp[i][j] будет итоговое кол-во изменений элементов

        -- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ –-

    https://habr.com/ru/post/676858/

        -- ВРЕМЕННАЯ СЛОЖНОСТЬ –-

    O(N*M) n - len(a)+1, m - len(b)+1

        -- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ --

    O(N*M)
"""
def levenstein_distance(a:list, b:list):
    
    dp = [[j if(i == 0) else (i if (j==0) else 0) for j in range(len(b)+1)]for i in range(len(a)+1)]

    for i in range(1,len(dp)):
        for j in range(1, len(dp[0])):
            dp[i][j] = min(dp[i-1][j] + 1, dp[i][j-1] + 1, dp[i-1][j-1] + (1 if(a[i-1] != b[j-1]) else 0)) 

    return dp[-1][-1]

def test_1():
    print(levenstein_distance('какашка','каша'))
    print(levenstein_distance('abacaba','abaabc'))
    print(levenstein_distance('innokentiy','innnokkentia'))
    print(levenstein_distance('r','x'))
print(levenstein_distance(input(), input()))